# Default configuration options
# Overriden by options set in config.ini (untracked by git, does not need to exist)
# These options should be set in the same [DEFAULT] section.

[DEFAULT]
# Logging configuration

# Levels as set by Python
# The value may either be one of these integers, or one of these strings:
#   CRITICAL = 50
#   ERROR    = 40
#   WARNING  = 30
#   INFO     = 20
#   DEBUG    = 10
#
# Log entries at or above the set level are emitted (both to disk and to the console, if enabled)
# Log entries below the set level are ignored
loglevel = INFO

# Logging format
# See https://docs.python.org/3/library/logging.html#logging.Formatter for documentation
# The default format appears like:
# [2018-07-28 21:29:24,180] INFO Accepting a new connection.
logformat = [%(asctime)s] %(levelname)s %(message)s

# These two options control logging to either the console or the disk
# At least one must be enabled to emit logs.
# If both are disabled, then the used logger will be configured so that no log entry can be emitted,
#   and logs will be configured to be sent to stdout.
log_to_console = on
log_to_disk = on

# If log_to_console is enabled, this option sets the stream to which logging is written.
# Can either be 'stdout' or 'stderr'
logstream = stderr


# If log_to_disk is enabled, these options set the location to which logs are written
# Logs are written to a rotating file: The configured file is current.
# Once daily, the log file has the date appended to it (as an extension), and the configured file is emptied
# Old logs are kept for 30 days.

# Directory is relative to the directory in which server.py is kept.
# A word of caution: The default directory is ignored by git. Other directories may not be.
# Be careful to avoid tracking logs in git.
logdirectory = logs

# File is the name of the current log within the configured directory.
logfile = server

# This parameter provides the name of the logger used by the server.
# I've never noticed any change caused by changing it, but perhaps if you want to include it in the format string or something, this could come in handy.
logger = Cadence Server


# Server management configuration

# Default duration browsers are told to cache resources for (if not specified on commandline)
# Duration is in seconds
default_caching_duration = 3600

# If set, forces caching to be enabled regardless of the commandline used.
# If the commandline specifies a caching duration, it will be used regardless.
# If it doesn't specify caching, but this option is set, the default caching duration (above) will be used.
force_caching = off

# If set, ARIA requests will check for a set 'tag' identifying a user when judging timeouts.
# This behavior will only be followed for requests from whitelisted IP addresses (see below)
special_request_timeouts = off

# If special_request_timeouts is set, these are the IP addresses which may submit requests using the tag system
# If they submit a request without a tag, the IP address will be used instead.
# Be careful about adding machines to this list - We don't check tag formats at all.
# A malicious machine could just use a UUID and flood us with requests.
# Basically, only add machines to this list that you or someone you trust controls.
# This should be a comma-delimited list of addresses, with no other formatting (except whitespace).
# If newlines are included, indent the lines which are still part of the list (not beyond the equal sign).
# If this is set to "None", the behavior will be equivalent to setting special_request_timeouts to off.
special_request_whitelist = None
# Example valid configuration:
# special_request_whitelist = 127.0.0.1, 192.168.0.1, 8.8.8.8
# Example valid multiline configuration:
# special_request_whitelist = 127.0.0.1,
#                        192.168.0.1,
#                        8.8.8.8

# If this is set, the whitelist is ignored, and all IP addresses are allowed to make special requests
# I highly recommend to leave this off in production, but it could come in handy during debugging.
# Note that even if this is set, if special_request_timeouts is off, the behavior will be off.
special_request_force_enable = off

# If this is not set to "None", this header is used to identify clients
# (Useful if behind a proxy, to set to a proxy-delivered header with the client's IP)
# If the header is not found, the default behavior (using the socket peer address) will be used.
# Two headers are processed with special behavior:
#   X-Forwarded-For is stripped for the leftmost IP address (the original client; ignoring in-between proxies)
#   Forwarded is parsed for the first address identified by a "for".
# Any other header is treated as if the entire header value is the client identifier
client_identification_header = None
# Example (Generally compatible server):
# client_identification_header = X-Forwarded-For
# Example (Strictly standards-compliant server):
# client_identification_header = Forwarded
# Example (Cloudflare):
# client_identification_header = CF-Connecting-IP

# This value (interpreted as a float) is how many seconds ARIA requests force between timeouts
# If 0 or negative, timeouts will be entirely disabled (no checking or storing will be performed)
request_timeout = 300.0
